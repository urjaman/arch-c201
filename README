This is just assorted stuff i have for having a more usable system on _my_ C201 w/ arch...
---

For keyboard: i have my .Xmodmap in this repo... note that i'm finnish with US keyboard C201s :P

# Xorg
If you have this driver that arch-arm "provides", get rid of it:
pacman -R xf86-video-armsoc-rockchip

You likely want just the modesetting driver that comes with xorg, it's
pretty good and has multi-head support.

I mostly run a relatively recent mesa (from git master),
so I don't keep track of how good the arch shipped mesa's panfrost is.
I'd expect you get an usable desktop, but I do still recommend a mesa
built from git instead.

In case of GL trouble this repo does have a xorg.conf.d fragment showing
how to disable glamor, but I hope you won't need that :)

(There is also the fbturbo driver, that does work but no multi-head,
and i dont know but I'd expect no GL either...)

# Sound
i made a systemd service for running alsaucm so you hopefully dont burn your speakers.

## 3.14
if you want to run that, copy the ROCKCHIPI2S alsa ucm
data from ChromeOS and adjust alsaucm-setup.service accordingly (it's commented out there)

## Mainline (4.x/5.x)
The upstream alsa ucm files should be ok.

# Wifi
For blobby wifi: copy the brcm firmware incl. the .txt from ChromeOS, namely these files:
/lib/firmware/brcm/brcmfmac4354-sdio.bin 
/lib/firmware/brcm/brcmfmac4354-sdio.txt
(linux-firmware had a different bin and no .txt (that i guess was necessary), but i decided to trust ChromeOS instead...)
linux-firmware updates will likely walk over the bin though, ugh.
chattr +i /lib/firmware/brcm/brcmfmac4354-sdio.bin
Tada. Idk if that'll work but maybe :P

# Kernels
I have a relatively stable (and rarely updated) kernel that you can use as a base
if you like in linux-c201, and i might be testing something with the PKGBUILD in
linux-test but that could also be abandoned at any point.

# Backlight (and volume) controls
I have an udev ruleset to make it accessible for video group members,
and xbindkeys config + scripts to adjust it. These are just one way to do it,
but i really really wanted control of the adjustment curve to myself, so scripting works for that.

I also added volume controls to the .xbindkeysrc so i dont need the xfce pulseaudio widget - it's looking
like that was giving me problems with the panel capturing the keyboard...
(i use pasystray instead now, but it doesnt do keyboard controls).

# cbatticon-simplified
I simplified cbatticon code a bit because it was being unreliable and i got enough of waiting
for the maintainer to figure his stuff out - a pkgbuild to build my version
(just a git build pointed at my repo) is included.

# home-usbdevicenet
my "userspace" for a very hacky usb device mode hack in the kernel side

# Widevine CDM
If you're so interested (for me the killer app is spotify web player), the ChromeOS
widevine plugin can run under linux (atleast as of writing) - for chromium it is simple,
for firefox see widevine-mod directory here.

# emmc-microsd-combo
this is just an example/template for custom udev rule+systemd service+shell script for
putting parts of your system onto a microSD partition (if you're running
from eMMC and would like to use the space on it for better things)
(It's not usable as-is, you'll need to atleast fill in the partition UUID
 and adjust the script - obviously in addition to all the setup stuff of
 making partitions, moving files etc...)
