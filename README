This is just assorted stuff i have for having a more usable system on _my_ C201 w/ arch...
---

For keyboard: i have my .Xmodmap in this repo... note that i'm finnish with US keyboard C201s :P
TODO: Make it saner and more like ChromeOS ...


# For "okay" X11 perf:
pacman -R xf86-video-armsoc-rockchip
You can use fbturbo if you like, it works and is pretty fast:
pacman -S xf86-video-fbturbo-git 
OTOH 
If you want to have multi-head support, the modesetting (KMS) driver that comes
with xorg-server works if you disable glamor - there is a xorg.conf.d
fragment for that in this repo


# Sound
i made a systemd service for running alsaucm so you hopefully dont burn your speakers...

## 3.14
if you want to run that, copy the ROCKCHIPI2S alsa ucm
data from ChromeOS and adjust alsaucm-setup.service accordingly (it's commented out there)

## 4.x
for working sound with pulseaudio: check my alsa ucm HiFi.conf in this repo
N.B. This HiFi.conf patch has been upstreamed, and will likely be in the next alsa-lib release (v1.1.7 maybe).

# Wifi
For blobby wifi: copy the brcm firmware incl. the .txt from ChromeOS, namely these files:
/lib/firmware/brcm/brcmfmac4354-sdio.bin 
/lib/firmware/brcm/brcmfmac4354-sdio.txt
(linux-firmware had a different bin and no .txt (that i guess was necessary), but i decided to trust ChromeOS instead...)
linux-firmware updates will likely walk over the bin though, ugh.
chattr +i /lib/firmware/brcm/brcmfmac4354-sdio.bin
Tada. Idk if that'll work but maybe :P



Kernel: the arch linux-armv7-chromebook will work, but...
lets just say, it's not the best because it's way too generic (loading rockchip-drm as a module? really...).
I reconfigured the arch kernel so i'm keeping that in linux-c201 here...
TODO: How to (semi-)automate keeping the kernel updated?

# Backlight (and volume) controls
I have an udev ruleset to make it accessible for video group members,
and xbindkeys config + scripts to adjust it. These are just one way to do it,
but i really really wanted control of the adjustment curve to myself, so scripting works for that.

I also added volume controls to the .xbindkeysrc so i dont need the xfce pulseaudio widget - it's looking
like that was giving me problems with the panel capturing the keyboard...
(i use pasystray instead now, but it doesnt do keyboard controls).

# cbatticon-simplified
I simplified cbatticon code a bit because it was being unreliable and i got enough of waiting
for the maintainer to figure his stuff out - a pkgbuild to build my version
(just a git build pointed at my repo) is included.

# home-usbdevicenet
my "userspace" for a very hacky usb device mode hack in the kernel side

# Widevine CDM
If you're so interested (for me the killer app is spotify web player), the ChromeOS
widevine plugin can run under linux (atleast as of writing) - for chromium it is simple,
for firefox see widevine-mod directory here.
